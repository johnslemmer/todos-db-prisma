# THIS FILE HAS BEEN AUTO-GENERATED BY "PRISMA DEPLOY"
# DO NOT EDIT THIS FILE DIRECTLY

#
# Model Types
#

type List implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  owner(where: UserWhereInput): User
  todos(where: TodoWhereInput, orderBy: TodoOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Todo!]
}

type Todo implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  list(where: ListWhereInput): List!
  isCompleted: Boolean!
}

type User implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  email: String!
  password: String!
  lists(where: ListWhereInput, orderBy: ListOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [List!]
}


#
# Other Types
#

type AggregateList {
  count: Int!
}

type AggregateTodo {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar DateTime

type ListConnection {
  pageInfo: PageInfo!
  edges: [ListEdge]!
  aggregate: AggregateList!
}

input ListCreateInput {
  name: String!
  owner: UserCreateOneWithoutListsInput
  todos: TodoCreateManyWithoutListInput
}

input ListCreateManyWithoutOwnerInput {
  create: [ListCreateWithoutOwnerInput!]
  connect: [ListWhereUniqueInput!]
}

input ListCreateOneWithoutTodosInput {
  create: ListCreateWithoutTodosInput
  connect: ListWhereUniqueInput
}

input ListCreateWithoutOwnerInput {
  name: String!
  todos: TodoCreateManyWithoutListInput
}

input ListCreateWithoutTodosInput {
  name: String!
  owner: UserCreateOneWithoutListsInput
}

type ListEdge {
  node: List!
  cursor: String!
}

enum ListOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  name_ASC
  name_DESC
}

type ListPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
}

type ListSubscriptionPayload {
  mutation: MutationType!
  node: List
  updatedFields: [String!]
  previousValues: ListPreviousValues
}

input ListSubscriptionWhereInput {
  AND: [ListSubscriptionWhereInput!]
  OR: [ListSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ListWhereInput
}

input ListUpdateInput {
  name: String
  owner: UserUpdateOneWithoutListsInput
  todos: TodoUpdateManyWithoutListInput
}

input ListUpdateManyWithoutOwnerInput {
  create: [ListCreateWithoutOwnerInput!]
  connect: [ListWhereUniqueInput!]
  disconnect: [ListWhereUniqueInput!]
  delete: [ListWhereUniqueInput!]
  update: [ListUpdateWithoutOwnerInput!]
  upsert: [ListUpsertWithoutOwnerInput!]
}

input ListUpdateOneWithoutTodosInput {
  create: ListCreateWithoutTodosInput
  connect: ListWhereUniqueInput
  disconnect: ListWhereUniqueInput
  delete: ListWhereUniqueInput
  update: ListUpdateWithoutTodosInput
  upsert: ListUpsertWithoutTodosInput
}

input ListUpdateWithoutOwnerDataInput {
  name: String
  todos: TodoUpdateManyWithoutListInput
}

input ListUpdateWithoutOwnerInput {
  where: ListWhereUniqueInput!
  data: ListUpdateWithoutOwnerDataInput!
}

input ListUpdateWithoutTodosDataInput {
  name: String
  owner: UserUpdateOneWithoutListsInput
}

input ListUpdateWithoutTodosInput {
  where: ListWhereUniqueInput!
  data: ListUpdateWithoutTodosDataInput!
}

input ListUpsertWithoutOwnerInput {
  where: ListWhereUniqueInput!
  update: ListUpdateWithoutOwnerDataInput!
  create: ListCreateWithoutOwnerInput!
}

input ListUpsertWithoutTodosInput {
  where: ListWhereUniqueInput!
  update: ListUpdateWithoutTodosDataInput!
  create: ListCreateWithoutTodosInput!
}

input ListWhereInput {
  AND: [ListWhereInput!]
  OR: [ListWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  owner: UserWhereInput
  todos_every: TodoWhereInput
  todos_some: TodoWhereInput
  todos_none: TodoWhereInput
}

input ListWhereUniqueInput {
  id: ID
}

scalar Long

type Mutation {
  createUser(data: UserCreateInput!): User!
  createList(data: ListCreateInput!): List!
  createTodo(data: TodoCreateInput!): Todo!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateList(data: ListUpdateInput!, where: ListWhereUniqueInput!): List
  updateTodo(data: TodoUpdateInput!, where: TodoWhereUniqueInput!): Todo
  deleteUser(where: UserWhereUniqueInput!): User
  deleteList(where: ListWhereUniqueInput!): List
  deleteTodo(where: TodoWhereUniqueInput!): Todo
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertList(where: ListWhereUniqueInput!, create: ListCreateInput!, update: ListUpdateInput!): List!
  upsertTodo(where: TodoWhereUniqueInput!, create: TodoCreateInput!, update: TodoUpdateInput!): Todo!
  updateManyUsers(data: UserUpdateInput!, where: UserWhereInput!): BatchPayload!
  updateManyLists(data: ListUpdateInput!, where: ListWhereInput!): BatchPayload!
  updateManyTodoes(data: TodoUpdateInput!, where: TodoWhereInput!): BatchPayload!
  deleteManyUsers(where: UserWhereInput!): BatchPayload!
  deleteManyLists(where: ListWhereInput!): BatchPayload!
  deleteManyTodoes(where: TodoWhereInput!): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  lists(where: ListWhereInput, orderBy: ListOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [List]!
  todoes(where: TodoWhereInput, orderBy: TodoOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Todo]!
  user(where: UserWhereUniqueInput!): User
  list(where: ListWhereUniqueInput!): List
  todo(where: TodoWhereUniqueInput!): Todo
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  listsConnection(where: ListWhereInput, orderBy: ListOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ListConnection!
  todoesConnection(where: TodoWhereInput, orderBy: TodoOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TodoConnection!
  node(id: ID!): Node
}

type Subscription {
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  list(where: ListSubscriptionWhereInput): ListSubscriptionPayload
  todo(where: TodoSubscriptionWhereInput): TodoSubscriptionPayload
}

type TodoConnection {
  pageInfo: PageInfo!
  edges: [TodoEdge]!
  aggregate: AggregateTodo!
}

input TodoCreateInput {
  name: String!
  isCompleted: Boolean
  list: ListCreateOneWithoutTodosInput!
}

input TodoCreateManyWithoutListInput {
  create: [TodoCreateWithoutListInput!]
  connect: [TodoWhereUniqueInput!]
}

input TodoCreateWithoutListInput {
  name: String!
  isCompleted: Boolean
}

type TodoEdge {
  node: Todo!
  cursor: String!
}

enum TodoOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  name_ASC
  name_DESC
  isCompleted_ASC
  isCompleted_DESC
}

type TodoPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  isCompleted: Boolean!
}

type TodoSubscriptionPayload {
  mutation: MutationType!
  node: Todo
  updatedFields: [String!]
  previousValues: TodoPreviousValues
}

input TodoSubscriptionWhereInput {
  AND: [TodoSubscriptionWhereInput!]
  OR: [TodoSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: TodoWhereInput
}

input TodoUpdateInput {
  name: String
  isCompleted: Boolean
  list: ListUpdateOneWithoutTodosInput
}

input TodoUpdateManyWithoutListInput {
  create: [TodoCreateWithoutListInput!]
  connect: [TodoWhereUniqueInput!]
  disconnect: [TodoWhereUniqueInput!]
  delete: [TodoWhereUniqueInput!]
  update: [TodoUpdateWithoutListInput!]
  upsert: [TodoUpsertWithoutListInput!]
}

input TodoUpdateWithoutListDataInput {
  name: String
  isCompleted: Boolean
}

input TodoUpdateWithoutListInput {
  where: TodoWhereUniqueInput!
  data: TodoUpdateWithoutListDataInput!
}

input TodoUpsertWithoutListInput {
  where: TodoWhereUniqueInput!
  update: TodoUpdateWithoutListDataInput!
  create: TodoCreateWithoutListInput!
}

input TodoWhereInput {
  AND: [TodoWhereInput!]
  OR: [TodoWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  isCompleted: Boolean
  isCompleted_not: Boolean
  list: ListWhereInput
}

input TodoWhereUniqueInput {
  id: ID
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  email: String!
  password: String!
  lists: ListCreateManyWithoutOwnerInput
}

input UserCreateOneWithoutListsInput {
  create: UserCreateWithoutListsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutListsInput {
  email: String!
  password: String!
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
}

type UserPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  email: String!
  password: String!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateInput {
  email: String
  password: String
  lists: ListUpdateManyWithoutOwnerInput
}

input UserUpdateOneWithoutListsInput {
  create: UserCreateWithoutListsInput
  connect: UserWhereUniqueInput
  disconnect: UserWhereUniqueInput
  delete: UserWhereUniqueInput
  update: UserUpdateWithoutListsInput
  upsert: UserUpsertWithoutListsInput
}

input UserUpdateWithoutListsDataInput {
  email: String
  password: String
}

input UserUpdateWithoutListsInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutListsDataInput!
}

input UserUpsertWithoutListsInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutListsDataInput!
  create: UserCreateWithoutListsInput!
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  lists_every: ListWhereInput
  lists_some: ListWhereInput
  lists_none: ListWhereInput
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
